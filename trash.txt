// Registration

// router.post('/register', (req, res) => {
//     let { name, username, contact, password, address } = req.body;
//     let newPassword;
//     bcrypt.genSalt((err, salt) => {
//         if (err) {
//             console.log(err);
//         }
//         else {
//             bcrypt.hash(password, salt, (err, hashedPassword) => {
//                 newPassword = hashedPassword;
//             })
//         }
//     })

//     userModel.findOne({ username })
//         .then(user => {
//             if (user) {
//                 res.json({ success: false, userIsPresent: true });
//             }
//             else {
//                 const newUser = new userModel({
//                     name, username, contact, "password": newPassword, address
//                 })

//                 newUser.save()
//                     .then((err,savedUser) => {
//                         console.log(savedUser)
//                         res.json({ success: true, userIsPresent: false, data: savedUser });
//                     })
//                     .catch((err) => {
//                         res.status(404).json({ success: false, err: err });
//                     });
//             }
//         }).catch(err => {
//             res.status(400).json({ success: false, err: err });
//         })



// })




// Add to Cart 

// router.put('/add/:user_id/:product_id', async (req, res) => {
//     const { user_id, product_id } = req.params
//     const { quantity } = req.body

//     try {
//         let user = await userModel.findById(user_id)
//         // console.log(user)
//         const existingProduct = await user.cart.find(item => item.product_id === product_id)

//         if(existingProduct){
//             existingProduct.quantity = parseInt(existingProduct.quantity) + 1
//         }
//         else{
//             user.cart.push({ product_id, quantity: 1 });
//         }
//         await user.save();
//         console.log(user)
//         res.json({ success: true, message: "Added to cart" })
//     } catch (err) {
//         res.json({ success: false, message: err.message })
//     }
// })




 const { user_id, product_id } = req.params;

    try {
        let user = await userModel.findById(user_id);
        console.log(user); // Check if user document is retrieved correctly
        console.log(user.cart); // Check if user.cart is populated correctly

        // Find the index of the existing product in the cart
        const existingProductIndex = user.cart.findIndex(item => item.product_id.toString() === product_id.toString());

        if (existingProductIndex !== -1) {
            // If the product exists, update the quantity by 1
            user.cart[existingProductIndex].quantity += 1;
            console.log(user.cart[existingProductIndex].product_id, ":", user.cart[existingProductIndex].quantity);
            console.log("Quantity updated");
        } else {
            // If the product does not exist, add a new item to the cart with quantity 1
            user.cart.push({ product_id, quantity: 1 });
            console.log(product_id, ": 1");
            console.log("New item added to the cart");
        }

        await user.save();
        res.json({ success: true, message: "Added to cart" });
    } catch (err) {
        res.json({ success: false, message: err.message });
    }


    {/* <div className="colors py-6 flex gap-3 md:flex-col items-center md:items-start">
                                <p className="text-lg">Choose a colour</p>
                                <div className="flex gap-3">
                                    <Checkbox value="black" id="black" colour="black" />
                                    <Checkbox value="blue" id="blue" colour="blue" />
                                    <Checkbox value="red" id="red" colour="red" />
                                </div>
                            </div> */}



                            {/* <button className='text-md px-5 py-2 rounded-lg bg-[var(--secondary)] text-white'>Buy Now</button> */}


{/* {
                                    data?.userData?.cart.findIndex((p) => p.product_id === productData._id)!==-1 ?
                                    data?.userData?.cart[data?.userData?.cart.findIndex((p) => p.product_id === productData._id)].quantity
                                     : "Add to cart"
                                    
                                } */}


  {/* {props.handleStar(Math.floor(props.ele.rating)).map((ele, key) => {
                        return (
                            <span key={key}>{ele}</span>
                        )
                    })} */}


// const mongoose = require('mongoose')

// const userSchema = new mongoose.Schema({
//     name: { type: String, required: false },
//     username: { type: String, required: false },
//     contact: { type: Number, required: false },
//     password: { type: String, required: false },
//     address: { type: String, required: false },
//     role: { type: String, required: true, default: "customer" },
//     cart: {
//         type: [{
//             product_id: String,
//             quantity: Number
//         }], required: false
//     }
// })

// const userModel = mongoose.model("users", userSchema);

// module.exports = userModel;